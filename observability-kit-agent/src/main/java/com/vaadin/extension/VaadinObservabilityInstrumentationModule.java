/*-
 * Copyright (C) 2022 Vaadin Ltd
 *
 * This program is available under Vaadin Commercial License and Service Terms.
 *
 *
 * See <https://vaadin.com/commercial-license-and-service-terms> for the full
 * license.
 */
package com.vaadin.extension;

import static io.opentelemetry.javaagent.extension.matcher.AgentElementMatchers.hasClassesNamed;

import com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation;
import com.vaadin.extension.instrumentation.communication.HeartbeatHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.JavaScriptBootstrapHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.PwaHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.SessionRequestHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.StreamRequestHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.UidlRequestHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.UnsupportedBrowserHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.WebComponentProviderInstrumentation;
import com.vaadin.extension.instrumentation.communication.WebcomponentBootstrapHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.AttachTemplateChildRpcHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.NavigationRpcHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.PublishedServerEventHandlerRpcHandlerInstrumentation;
import com.vaadin.extension.instrumentation.communication.rpc.ReturnChannelHandlerInstrumentation;
import com.vaadin.extension.instrumentation.data.DataCommunicatorInstrumentation;
import com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation;
import com.vaadin.extension.instrumentation.data.renderer.ComponentRendererInstrumentation;
import com.vaadin.extension.instrumentation.server.ErrorHandlerInstrumentation;
import com.vaadin.extension.instrumentation.server.StaticFileServerInstrumentation;
import com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation;
import com.vaadin.extension.instrumentation.server.VaadinSessionInstrumentation;
import com.vaadin.pro.licensechecker.BuildType;
import com.vaadin.pro.licensechecker.LicenseChecker;

import com.google.auto.service.AutoService;
import io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule;
import io.opentelemetry.javaagent.extension.instrumentation.TypeInstrumentation;
import io.opentelemetry.javaagent.tooling.muzzle.InstrumentationModuleMuzzle;
import io.opentelemetry.javaagent.tooling.muzzle.VirtualFieldMappingsBuilder;
import io.opentelemetry.javaagent.tooling.muzzle.references.ClassRef;
import io.opentelemetry.javaagent.tooling.muzzle.references.Flag;
import io.opentelemetry.javaagent.tooling.muzzle.references.Source;
import net.bytebuddy.matcher.ElementMatcher;
import org.objectweb.asm.Type;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@AutoService(InstrumentationModule.class)
public class VaadinObservabilityInstrumentationModule
        extends InstrumentationModule implements InstrumentationModuleMuzzle {

    static {
        LicenseChecker.checkLicenseFromStaticBlock("vaadin-observability-kit",
                InstrumentationHelper.INSTRUMENTATION_VERSION,
                BuildType.PRODUCTION);
    }

    public static final String INSTRUMENTATION_NAME = "vaadin-observability-kit";
    public static final String EXTENDED_NAME = "opentelemetry-vaadin-observability-instrumentation-extension-"
            + InstrumentationHelper.INSTRUMENTATION_VERSION;

    public VaadinObservabilityInstrumentationModule() {
        super(INSTRUMENTATION_NAME, EXTENDED_NAME);
    }

    @Override
    public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {
        // class added in vaadin 14.2
        return hasClassesNamed(
                "com.vaadin.flow.server.frontend.installer.NodeInstaller");
    }

    @Override
    public boolean isHelperClass(String className) {
        // TODO: check if helper classes can be included by convention
        return className != null
                && className.startsWith("com.vaadin.extension");
    }

    @Override
    public List<TypeInstrumentation> typeInstrumentations() {
        // TypeInstrumentation for this instrumentation module
        return Stream
                .of(instrumentation(), rpcHandlerInstrumentation(),
                        requestHandlerInstrumentation(), dataInstrumentation(),
                        serverInstrumentation())
                .flatMap(i -> i).collect(Collectors.toList());
    }

    private Stream<TypeInstrumentation> instrumentation() {
        // @formatter:off
        return Stream.of(new AbstractNavigationStateRendererInstrumentation());
        // @formatter:on
    }

    private Stream<TypeInstrumentation> rpcHandlerInstrumentation() {
        // @formatter:off
        return Stream.of(new AttachExistingElementRpcHandlerInstrumentation(),
                new AttachTemplateChildRpcHandlerInstrumentation(),
                new EventRpcHandlerInstrumentation(),
                new MapSyncRpcHandlerInstrumentation(),
                new NavigationRpcHandlerInstrumentation(),
                new PublishedServerEventHandlerRpcHandlerInstrumentation(),
                new ReturnChannelHandlerInstrumentation());
        // @formatter:on
    }

    private Stream<TypeInstrumentation> requestHandlerInstrumentation() {
        // @formatter:off
        return Stream.of(new HeartbeatHandlerInstrumentation(),
                new JavaScriptBootstrapHandlerInstrumentation(),
                new PwaHandlerInstrumentation(),
                new SessionRequestHandlerInstrumentation(),
                new StreamRequestHandlerInstrumentation(),
                new UidlRequestHandlerInstrumentation(),
                new UnsupportedBrowserHandlerInstrumentation(),
                new WebcomponentBootstrapHandlerInstrumentation(),
                new WebComponentProviderInstrumentation());
        // @formatter:on
    }

    private Stream<TypeInstrumentation> dataInstrumentation() {
        // @formatter:off
        return Stream.of(new ComponentRendererInstrumentation(),
                new DataCommunicatorInstrumentation(),
                new HierarchicalDataProviderInstrumentation());
        // @formatter:on
    }

    private Stream<TypeInstrumentation> serverInstrumentation() {
        // @formatter:off
        return Stream.of(new ErrorHandlerInstrumentation(),
                new StaticFileServerInstrumentation(),
                new VaadinServletInstrumentation(),
                new VaadinSessionInstrumentation());
        // @formatter:on
    }

    public Map getMuzzleReferences() {
        HashMap references = new HashMap(38, 0.75F);
        // @formatter:off
        references.put("com.vaadin.flow.server.ErrorEvent", ClassRef.builder("com.vaadin.flow.server.ErrorEvent").addSource("com.vaadin.extension.instrumentation.server.ErrorHandlerInstrumentation$ErrorAdvice", 62).addSource("com.vaadin.extension.instrumentation.server.ErrorHandlerInstrumentation$ErrorAdvice", 64).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.server.ErrorHandlerInstrumentation$ErrorAdvice", 62), new Source("com.vaadin.extension.instrumentation.server.ErrorHandlerInstrumentation$ErrorAdvice", 64)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getThrowable", Type.getType("Ljava/lang/Throwable;"), new Type[0]).build());
        references.put("com.vaadin.flow.router.Location", ClassRef.builder("com.vaadin.flow.router.Location").addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 58).addSource("com.vaadin.extension.InstrumentationHelper", 243).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 58), new Source("com.vaadin.extension.InstrumentationHelper", 243)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getPath", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.router.NavigationEvent", ClassRef.builder("com.vaadin.flow.router.NavigationEvent").addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 58).addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 68).addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 70).addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 83).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 58)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getLocation", Type.getType("Lcom/vaadin/flow/router/Location;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 68)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "isForwardTo", Type.getType("Z"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 70)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getTrigger", Type.getType("Lcom/vaadin/flow/router/NavigationTrigger;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 83)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getUI", Type.getType("Lcom/vaadin/flow/component/UI;"), new Type[0]).build());
        references.put("com.vaadin.flow.router.NavigationTrigger", ClassRef.builder("com.vaadin.flow.router.NavigationTrigger").addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 70).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 70)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "name", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.component.UI", ClassRef.builder("com.vaadin.flow.component.UI").addSource("com.vaadin.extension.instrumentation.AbstractNavigationStateRendererInstrumentation$HandleAdvice", 83).addSource("com.vaadin.extension.InstrumentationHelper", 227).addSource("com.vaadin.extension.InstrumentationHelper", 243).addSource("com.vaadin.extension.InstrumentationHelper", 258).addSource("com.vaadin.extension.instrumentation.communication.UidlRequestHandlerInstrumentation$SynchronizedHandleRequestAdvice", 79).addSource("com.vaadin.extension.instrumentation.communication.UidlRequestHandlerInstrumentation$SynchronizedHandleRequestAdvice", 83).addSource("com.vaadin.extension.ElementInstrumentationInfo", 73).addSource("com.vaadin.extension.ElementInstrumentationInfo", 76).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 243), new Source("com.vaadin.extension.InstrumentationHelper", 258), new Source("com.vaadin.extension.ElementInstrumentationInfo", 76)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getInternals", Type.getType("Lcom/vaadin/flow/component/internal/UIInternals;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.UidlRequestHandlerInstrumentation$SynchronizedHandleRequestAdvice", 79)}, new Flag[]{Flag.OwnershipFlag.STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getCurrent", Type.getType("Lcom/vaadin/flow/component/UI;"), new Type[0]).build());
        references.put("jakarta.servlet.http.HttpServletRequest", ClassRef.builder("jakarta.servlet.http.HttpServletRequest").addSource("com.vaadin.extension.InstrumentationHelper", 141).addSource("com.vaadin.extension.InstrumentationHelper", 142).addSource("com.vaadin.extension.InstrumentationHelper", 143).addSource("com.vaadin.extension.InstrumentationHelper", 144).addSource("com.vaadin.extension.InstrumentationHelper", 145).addSource("com.vaadin.extension.InstrumentationHelper", 146).addSource("com.vaadin.extension.InstrumentationHelper", 151).addSource("com.vaadin.extension.InstrumentationHelper", 153).addSource("com.vaadin.extension.InstrumentationHelper", 196).addSource("com.vaadin.extension.InstrumentationHelper", 201).addSource("com.vaadin.extension.InstrumentationHelper", 320).addSource("com.vaadin.extension.InstrumentationHelper", 321).addSource("com.vaadin.extension.InstrumentationHelper", 322).addSource("com.vaadin.extension.InstrumentationHelper", 323).addSource("com.vaadin.extension.InstrumentationHelper", 324).addSource("com.vaadin.extension.InstrumentationHelper", 325).addSource("com.vaadin.extension.InstrumentationHelper", 327).addSource("com.vaadin.extension.InstrumentationHelper", 333).addSource("com.vaadin.extension.instrumentation.server.StaticFileServerInstrumentation$HandleRequestAdvice", 77).addSource("com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation$MethodAdvice", 67).addSource("com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation$MethodAdvice", 77).addSource("com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation$MethodAdvice", 82).addFlag(Flag.ManifestationFlag.INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 141)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getScheme", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 142)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getMethod", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 143)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getRemoteHost", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 144)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getContextPath", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 145), new Source("com.vaadin.extension.InstrumentationHelper", 151), new Source("com.vaadin.extension.InstrumentationHelper", 153), new Source("com.vaadin.extension.InstrumentationHelper", 320), new Source("com.vaadin.extension.InstrumentationHelper", 322), new Source("com.vaadin.extension.InstrumentationHelper", 323), new Source("com.vaadin.extension.InstrumentationHelper", 324), new Source("com.vaadin.extension.InstrumentationHelper", 325), new Source("com.vaadin.extension.InstrumentationHelper", 327)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getPathInfo", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 146)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getQueryString", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 196)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getSession", Type.getType("Ljakarta/servlet/http/HttpSession;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 201), new Source("com.vaadin.extension.InstrumentationHelper", 333)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getParameter", Type.getType("Ljava/lang/String;"), new Type[]{Type.getType("Ljava/lang/String;")}).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 321), new Source("com.vaadin.extension.InstrumentationHelper", 327)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getServletPath", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("jakarta.servlet.http.HttpServletResponse", ClassRef.builder("jakarta.servlet.http.HttpServletResponse").addSource("com.vaadin.extension.InstrumentationHelper", 175).addSource("com.vaadin.extension.InstrumentationHelper", 176).addSource("com.vaadin.extension.instrumentation.server.StaticFileServerInstrumentation$HandleRequestAdvice", 92).addSource("com.vaadin.extension.instrumentation.server.StaticFileServerInstrumentation$HandleRequestAdvice", 96).addSource("com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation$MethodAdvice", 99).addFlag(Flag.ManifestationFlag.INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 175), new Source("com.vaadin.extension.InstrumentationHelper", 176), new Source("com.vaadin.extension.instrumentation.server.StaticFileServerInstrumentation$HandleRequestAdvice", 92), new Source("com.vaadin.extension.instrumentation.server.StaticFileServerInstrumentation$HandleRequestAdvice", 96)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getStatus", Type.getType("I"), new Type[0]).build());
        references.put("jakarta.servlet.http.HttpSession", ClassRef.builder("jakarta.servlet.http.HttpSession").addSource("com.vaadin.extension.InstrumentationHelper", 196).addSource("com.vaadin.extension.InstrumentationHelper", 199).addSource("com.vaadin.extension.InstrumentationHelper", 204).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 199), new Source("com.vaadin.extension.InstrumentationHelper", 204)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getId", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.server.Version", ClassRef.builder("com.vaadin.flow.server.Version").addSource("com.vaadin.extension.InstrumentationHelper", 198).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 198)}, new Flag[]{Flag.OwnershipFlag.STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getFullVersion", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.component.internal.UIInternals", ClassRef.builder("com.vaadin.flow.component.internal.UIInternals").addSource("com.vaadin.extension.InstrumentationHelper", 243).addSource("com.vaadin.extension.InstrumentationHelper", 258).addSource("com.vaadin.extension.InstrumentationHelper", 259).addSource("com.vaadin.extension.ElementInstrumentationInfo", 76).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 243)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getActiveViewLocation", Type.getType("Lcom/vaadin/flow/router/Location;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 259), new Source("com.vaadin.extension.ElementInstrumentationInfo", 76)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getActiveRouterTargetsChain", Type.getType("Ljava/util/List;"), new Type[0]).build());
        references.put("com.vaadin.flow.router.RouteConfiguration", ClassRef.builder("com.vaadin.flow.router.RouteConfiguration").addSource("com.vaadin.extension.InstrumentationHelper", 264).addSource("com.vaadin.extension.InstrumentationHelper", 278).addSource("com.vaadin.extension.InstrumentationHelper", 280).addSource("com.vaadin.extension.InstrumentationHelper", 282).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 264), new Source("com.vaadin.extension.InstrumentationHelper", 278)}, new Flag[]{Flag.OwnershipFlag.STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "forSessionScope", Type.getType("Lcom/vaadin/flow/router/RouteConfiguration;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 264), new Source("com.vaadin.extension.InstrumentationHelper", 282)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getTemplate", Type.getType("Ljava/util/Optional;"), new Type[]{Type.getType("Ljava/lang/Class;")}).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 280)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getRoute", Type.getType("Ljava/util/Optional;"), new Type[]{Type.getType("Ljava/lang/String;")}).build());
        references.put("com.vaadin.flow.component.Component", ClassRef.builder("com.vaadin.flow.component.Component").addSource("com.vaadin.extension.InstrumentationHelper", 265).addSource("com.vaadin.extension.ElementInstrumentationInfo", 47).addSource("com.vaadin.extension.ElementInstrumentationInfo", 70).addSource("com.vaadin.extension.ElementInstrumentationInfo", 78).addSource("com.vaadin.extension.ElementInstrumentationInfo", 79).addSource("com.vaadin.extension.ElementInstrumentationInfo", 94).addSource("com.vaadin.extension.ElementInstrumentationInfo", 96).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 94), new Source("com.vaadin.extension.ElementInstrumentationInfo", 96)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getId", Type.getType("Ljava/util/Optional;"), new Type[0]).build());
        references.put("com.vaadin.flow.server.HandlerHelper$RequestType", ClassRef.builder("com.vaadin.flow.server.HandlerHelper$RequestType").addSource("com.vaadin.extension.InstrumentationHelper", 332).addSource("com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation$MethodAdvice", 67).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addField(new Source[]{new Source("com.vaadin.extension.instrumentation.server.VaadinServletInstrumentation$MethodAdvice", 67)}, new Flag[]{Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER, Flag.OwnershipFlag.STATIC}, "HEARTBEAT", Type.getType("Lcom/vaadin/flow/server/HandlerHelper$RequestType;"), false).addMethod(new Source[]{new Source("com.vaadin.extension.InstrumentationHelper", 332)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getIdentifier", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.data.provider.DataProvider", ClassRef.builder("com.vaadin.flow.data.provider.DataProvider").addSource("com.vaadin.extension.instrumentation.data.DataCommunicatorInstrumentation$FetchAdvice", 55).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).build());
        references.put("com.vaadin.flow.data.provider.DataCommunicator", ClassRef.builder("com.vaadin.flow.data.provider.DataCommunicator").addSource("com.vaadin.extension.instrumentation.data.DataCommunicatorInstrumentation$FetchAdvice", 55).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.data.DataCommunicatorInstrumentation$FetchAdvice", 55)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getDataProvider", Type.getType("Lcom/vaadin/flow/data/provider/DataProvider;"), new Type[0]).build());
        references.put("com.vaadin.flow.server.VaadinRequest", ClassRef.builder("com.vaadin.flow.server.VaadinRequest").addSource("com.vaadin.extension.instrumentation.communication.JavaScriptBootstrapHandlerInstrumentation$SynchronizedHandleRequestAdvice", 74).addSource("com.vaadin.extension.instrumentation.communication.StreamRequestHandlerInstrumentation$HandleRequestAdvice", 79).addSource("com.vaadin.extension.instrumentation.communication.StreamRequestHandlerInstrumentation$HandleRequestAdvice", 87).addSource("com.vaadin.extension.instrumentation.communication.PwaHandlerInstrumentation$HandleRequestAdvice", 69).addSource("com.vaadin.extension.instrumentation.communication.WebComponentProviderInstrumentation$SynchronizedHandleRequestAdvice", 72).addSource("com.vaadin.extension.instrumentation.communication.WebcomponentBootstrapHandlerInstrumentation$SynchronizedHandleRequestAdvice", 75).addFlag(Flag.ManifestationFlag.INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.JavaScriptBootstrapHandlerInstrumentation$SynchronizedHandleRequestAdvice", 74), new Source("com.vaadin.extension.instrumentation.communication.WebcomponentBootstrapHandlerInstrumentation$SynchronizedHandleRequestAdvice", 75)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getParameter", Type.getType("Ljava/lang/String;"), new Type[]{Type.getType("Ljava/lang/String;")}).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.StreamRequestHandlerInstrumentation$HandleRequestAdvice", 79), new Source("com.vaadin.extension.instrumentation.communication.StreamRequestHandlerInstrumentation$HandleRequestAdvice", 87), new Source("com.vaadin.extension.instrumentation.communication.PwaHandlerInstrumentation$HandleRequestAdvice", 69), new Source("com.vaadin.extension.instrumentation.communication.WebComponentProviderInstrumentation$SynchronizedHandleRequestAdvice", 72)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getPathInfo", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.server.VaadinSession", ClassRef.builder("com.vaadin.flow.server.VaadinSession").addSource("com.vaadin.extension.instrumentation.server.VaadinSessionInstrumentation$CloseSessionAdvice", 65).addSource("com.vaadin.extension.metrics.Metrics", 69).addSource("com.vaadin.extension.metrics.Metrics", 79).addSource("com.vaadin.extension.metrics.Metrics", 104).addSource("com.vaadin.extension.instrumentation.server.VaadinSessionInstrumentation$CreateSessionAdvice", 57).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.metrics.Metrics", 104)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getPushId", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.data.provider.hierarchy.HierarchicalQuery", ClassRef.builder("com.vaadin.flow.data.provider.hierarchy.HierarchicalQuery").addSource("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchChildrenAdvice", 92).addSource("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchChildrenAdvice", 93).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchChildrenAdvice", 92)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getLimit", Type.getType("I"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchChildrenAdvice", 93)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getOffset", Type.getType("I"), new Type[0]).build());
        references.put("elemental.json.JsonObject", ClassRef.builder("elemental.json.JsonObject").addSource("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 71).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 79).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 80).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 81).addFlag(Flag.ManifestationFlag.INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 71), new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 80)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getString", Type.getType("Ljava/lang/String;"), new Type[]{Type.getType("Ljava/lang/String;")}).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 79)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "hasKey", Type.getType("Z"), new Type[]{Type.getType("Ljava/lang/String;")}).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 81)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "get", Type.getType("Lelemental/json/JsonValue;"), new Type[]{Type.getType("Ljava/lang/String;")}).build());
        references.put("com.vaadin.flow.internal.StateNode", ClassRef.builder("com.vaadin.flow.internal.StateNode").addSource("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 72).addSource("com.vaadin.extension.ElementInstrumentationInfo", 35).addSource("com.vaadin.extension.ElementInstrumentationInfo", 63).addSource("com.vaadin.extension.ElementInstrumentationInfo", 64).addSource("com.vaadin.extension.ElementInstrumentationInfo", 72).addSource("com.vaadin.extension.ElementInstrumentationInfo", 73).addSource("com.vaadin.extension.instrumentation.communication.rpc.AttachTemplateChildRpcHandlerInstrumentation$AttachElementAdvice", 69).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 74).addSource("com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation$AttachElementAdvice", 72).addSource("com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation$AttachElementAdvice", 76).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 72), new Source("com.vaadin.extension.ElementInstrumentationInfo", 73)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getOwner", Type.getType("Lcom/vaadin/flow/internal/NodeOwner;"), new Type[0]).build());
        references.put("com.vaadin.flow.dom.Element", ClassRef.builder("com.vaadin.flow.dom.Element").addSource("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 74).addSource("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 80).addSource("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 83).addSource("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 87).addSource("com.vaadin.extension.ElementInstrumentationInfo", 39).addSource("com.vaadin.extension.ElementInstrumentationInfo", 64).addSource("com.vaadin.extension.ElementInstrumentationInfo", 67).addSource("com.vaadin.extension.ElementInstrumentationInfo", 93).addSource("com.vaadin.extension.ElementInstrumentationInfo", 101).addSource("com.vaadin.extension.ElementInstrumentationInfo", 102).addSource("com.vaadin.extension.instrumentation.communication.rpc.AttachTemplateChildRpcHandlerInstrumentation$AttachElementAdvice", 75).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 76).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 83).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 84).addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 94).addSource("com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation$AttachElementAdvice", 81).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 80), new Source("com.vaadin.extension.ElementInstrumentationInfo", 67), new Source("com.vaadin.extension.instrumentation.communication.rpc.AttachTemplateChildRpcHandlerInstrumentation$AttachElementAdvice", 75), new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 94), new Source("com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation$AttachElementAdvice", 81)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getTag", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 83)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "hasProperty", Type.getType("Z"), new Type[]{Type.getType("Ljava/lang/String;")}).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.EventRpcHandlerInstrumentation$MethodAdvice", 87)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getProperty", Type.getType("Z"), new Type[]{Type.getType("Ljava/lang/String;"), Type.getType("Z")}).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 64)}, new Flag[]{Flag.OwnershipFlag.STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "get", Type.getType("Lcom/vaadin/flow/dom/Element;"), new Type[]{Type.getType("Lcom/vaadin/flow/internal/StateNode;")}).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 93)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getComponent", Type.getType("Ljava/util/Optional;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 101), new Source("com.vaadin.extension.ElementInstrumentationInfo", 102)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getText", Type.getType("Ljava/lang/String;"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 83)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getProperty", Type.getType("Ljava/lang/String;"), new Type[]{Type.getType("Ljava/lang/String;"), Type.getType("Ljava/lang/String;")}).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 84)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getAttribute", Type.getType("Ljava/lang/String;"), new Type[]{Type.getType("Ljava/lang/String;")}).build());
        references.put("com.vaadin.flow.internal.NodeOwner", ClassRef.builder("com.vaadin.flow.internal.NodeOwner").addSource("com.vaadin.extension.ElementInstrumentationInfo", 72).addSource("com.vaadin.extension.ElementInstrumentationInfo", 73).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).build());
        references.put("com.vaadin.flow.internal.StateTree", ClassRef.builder("com.vaadin.flow.internal.StateTree").addSource("com.vaadin.extension.ElementInstrumentationInfo", 72).addSource("com.vaadin.extension.ElementInstrumentationInfo", 73).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 73)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getUI", Type.getType("Lcom/vaadin/flow/component/UI;"), new Type[0]).build());
        references.put("com.vaadin.flow.component.HasLabel", ClassRef.builder("com.vaadin.flow.component.HasLabel").addSource("com.vaadin.extension.ElementInstrumentationInfo", 97).addSource("com.vaadin.extension.ElementInstrumentationInfo", 98).addSource("com.vaadin.extension.ElementInstrumentationInfo", 100).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.ElementInstrumentationInfo", 98), new Source("com.vaadin.extension.ElementInstrumentationInfo", 100)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getLabel", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.server.VaadinServletRequest", ClassRef.builder("com.vaadin.flow.server.VaadinServletRequest").addSource("com.vaadin.extension.instrumentation.communication.WebcomponentBootstrapHandlerInstrumentation$SynchronizedHandleRequestAdvice", 78).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.WebcomponentBootstrapHandlerInstrumentation$SynchronizedHandleRequestAdvice", 78)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getRequestURL", Type.getType("Ljava/lang/StringBuffer;"), new Type[0]).build());
        references.put("elemental.json.JsonValue", ClassRef.builder("elemental.json.JsonValue").addSource("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 81).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addFlag(Flag.ManifestationFlag.INTERFACE).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.MapSyncRpcHandlerInstrumentation$MethodAdvice", 81)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "asString", Type.getType("Ljava/lang/String;"), new Type[0]).build());
        references.put("com.vaadin.flow.internal.nodefeature.AttachExistingElementFeature", ClassRef.builder("com.vaadin.flow.internal.nodefeature.AttachExistingElementFeature").addSource("com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation$AttachElementAdvice", 76).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.communication.rpc.AttachExistingElementRpcHandlerInstrumentation$AttachElementAdvice", 76)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getNode", Type.getType("Lcom/vaadin/flow/internal/StateNode;"), new Type[0]).build());
        references.put("com.vaadin.flow.data.provider.Query", ClassRef.builder("com.vaadin.flow.data.provider.Query").addSource("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchAdvice", 64).addSource("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchAdvice", 65).addFlag(Flag.ManifestationFlag.NON_INTERFACE).addFlag(Flag.MinimumVisibilityFlag.PUBLIC).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchAdvice", 64)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getLimit", Type.getType("I"), new Type[0]).addMethod(new Source[]{new Source("com.vaadin.extension.instrumentation.data.HierarchicalDataProviderInstrumentation$FetchAdvice", 65)}, new Flag[]{Flag.OwnershipFlag.NON_STATIC, Flag.MinimumVisibilityFlag.PROTECTED_OR_HIGHER}, "getOffset", Type.getType("I"), new Type[0]).build());
        // @formatter:on
        return references;
    }

    public List getMuzzleHelperClassNames() {
        ArrayList classNames = new ArrayList(11);
        classNames.add("com.vaadin.extension.InstrumentationHelper");
        classNames.add("com.vaadin.extension.HttpStatusCode");
        classNames.add("com.vaadin.extension.InstrumentationRequest");
        classNames.add("com.vaadin.extension.ContextKeys");
        classNames.add("com.vaadin.extension.SpanNameGenerator");
        classNames.add("com.vaadin.extension.SpanAttributeGenerator");
        classNames.add("com.vaadin.extension.conf.TraceLevel");
        classNames.add("com.vaadin.extension.conf.Configuration");
        classNames.add("com.vaadin.extension.metrics.Metrics");
        classNames.add("com.vaadin.extension.metrics.Metrics$InstantProvider");
        classNames.add("com.vaadin.extension.ElementInstrumentationInfo");
        return classNames;
    }

    public void registerMuzzleVirtualFields(VirtualFieldMappingsBuilder builder) {
    }
}
