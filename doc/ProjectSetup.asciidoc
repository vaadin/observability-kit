= Vaadin telemetry extension

=== Building the project

The current project uses Gradle for the build and can be built either with
`./gradlew clean build` for an extension build or `./gradlew clean build extendedAgent`
to get an embedded full agent.

=== Running the agent

The agent is run with the `javaagent` flag for instance `java -javaagent:opentelemetry-javaagent.jar -jar project.jar`

=== Running the extendedAgent

If the agent is built as an extended agent with the extension embedded
only the `javaagent` gflag is needed

.Simple embedded extension
[source,text]
----
java -javaagent:vaadin-opentelemetry-javaagent-1.0-SNAPSHOT.jar -jar target/myapp-1.0-SNAPSHOT.jar
----

=== Connecting to Jaeger Monitor

To start with Jaeger download the latest version from https://www.jaegertracing.io/download/[jaegertracing]

After unpacking run the `jaeger-all-in-one` package with the default settings

For the application execution the system settings `otel.traces.exporter` and `otel.exporter.jaeger.endpoint`
need to be given. Then as we have the default settings so we will disable metrics with `otel.metrics.exporter`.

.Sample jaeger startup embedded extension
[source,text]
----
java -javaagent:opentelemetry-javaagent.jar -Dotel.traces.exporter=jaeger -Dotel.exporter.jaeger.endpoint=http://localhost:14250 -Dotel.metrics.exporter=none -jar target/myapp-1.0-SNAPSHOT.jar
----

